// #DCB8CB, #FFF0F8, #F5CEE3, #6DA86C, #CFF5CE;

$color1: #828A95;
$color2: #CEEAF7;
$color3: #CCD7E4;
$color4: #D5C9DF;
$color5: #DCB8CB;

$sidebar-width: 500px;
$content-padding: 20px;
$content-width: calc(100% - #{$sidebar-width} - (#{$content-padding} * 2));
$title-displacement: 150px;

@import url('https://fonts.googleapis.com/css2?family=Faustina:wght@500&family=Oswald&family=PT+Sans+Narrow&display=swap');

@mixin reset {
    margin: 0px;
    padding: 0px;
}

@mixin background {
    background-image: url(../img/background.jpg);
    background-attachment: fixed;
    background-size: auto auto;
}

@mixin tag-shape {
    font-family: "PT Sans Narrow", monospace;
    font-size: initial;
    font-weight: bolder;
    padding: 0px .2em 0px .2em;
    border-radius: 0.2rem;
    order: 9999;
    display: inline-flex;
    flex-direction: column;
    justify-content: center;
    height: max-content;
}

@mixin stylize($color) {
    @if $color == green {
        background: #6DA86C;
        color: #CFF5CE;
        text-shadow: 1px 1px 0px #{darken(#6DA86C, 50%)};
        filter: drop-shadow(0px 1px .5px #CFF5CE);
    }
}

html, body {
    @include reset;
    display: flex;
    flex-flow: column;
    justify-content: space-between;
    height: 100%;
    width: 100%;

    //colors
    background: $color1;
}

a {
    text-decoration: none;
    color: #F5E3CE;
    text-shadow: .3px .3px 0px #{darken(#A88D6C, 20%)};

    &:visited {
        color: darken(#F5E3CE, 10%);
    }

}

#content {
    @include reset;
    color: #F0FAFF;
    text-shadow: .3px .3px 0px #{darken(#F0FAFF, 90%)};
    font-family: "Faustina", serif;
    font-size: larger;
    text-align: justify;
    
    & header {
        width: $sidebar-width;
        height: $title-displacement;
        position: fixed;
        z-index: 9999;
        
        display: flex;
        flex-direction: column;
        justify-content: flex-end;
        & .title  {
            align-self: center;
            margin-bottom: $content-padding * 2;

            color: $color4;
            filter: drop-shadow(2px 2px 0px #{darken($color5, 40%)})
        }
        
        @media only screen and (max-width: 1300px) {
            position: relative;
            width: 100%;
            @include background;
        }
    }

    & #table-of-contents {
        width: $sidebar-width;
        height: 100%;
        position: fixed;
        padding-top: $title-displacement * 2;

        @include background;
        filter: drop-shadow(1px 0px 4px #{darken($color1, 25%)});
        & h2 {
            display: none;
        }
        
        & #text-table-of-contents {
            margin-top: $title-displacement * -1;
            & > ul,ol {
                list-style: none;

                & > li {
                    padding: .3em;
                }

                & li {
                    list-style: none;
                }
            }
        }

        @media only screen and (max-width: 1300px) {
            display: none;
        }
    }
    
    & > [id^="outline-container"] {
        width: $content-width;
        margin-left: $sidebar-width;     
        @media only screen and (min-width: 1300px) {
            width: 900px;
        }
        @media only screen and (max-width: 1300px) {
            margin: auto;
            width: 900px - ($content-padding * 2);
        }
        @media only screen and (max-width: 900px) {
            margin: auto;
            width: calc(100% - (#{$content-padding} * 2));
        }
        padding-left: $content-padding;
        padding-right: $content-padding;

        display: flex;
        flex-flow: column;
        justify-content: space-between;
    }
    
    & [id^="outline-container"] > :first-child {
        display: flex;
        justify-content: flex-start;
        align-items: flex-start;
        margin-bottom: 0px;
        font-family: "Oswald", monospace;
        color: #FFF0F8;
        text-shadow: 1px 1px 0px #{darken(#DCB8CB, 25%)};

        &::after {
            content: " ";
            white-space: pre;
        }
        
        & [class^="section-number"]::after {
            content: " ";
            white-space: pre;
        }
    }
}


#postamble, #preamble {
    z-index: 9999;
    width: 100%;
    background: black;
    & p {
        @include reset;
        color: white;
    }
}

.subtitle { text-align: center;
          font-size: medium;
          font-weight: bold;
          margin-top:0; }

.todo {
    font-family: monospace;
    @include tag-shape;
    @include stylize(green);
}

.done   { font-family: monospace; color: green; }
.priority { font-family: monospace; color: orange; }
.tag    { background-color: #eee; font-family: monospace;
        padding: 2px; font-size: 80%; font-weight: normal; }
.timestamp { color: #bebebe; }
.timestamp-kwd { color: #5f9ea0; }
.org-right  { margin-left: auto; margin-right: 0px;  text-align: right; }
.org-left   { margin-left: 0px;  margin-right: auto; text-align: left; }
.org-center { margin-left: auto; margin-right: auto; text-align: center; }
.underline { text-decoration: underline; }
p.verse { margin-left: 3%; }
pre {
    background: #000000;
    padding: 8pt;
    font-family: monospace;
    overflow: scroll;
    scrollbar-width: none;
    text-overflow: ellipsis;
    margin: 1.2em;
    border-radius: 4px;
    filter: drop-shadow(0px 1px 1px #{darken($color1, 35%)});
    &.src {
        position: relative;
        padding-top: 1.2em;
        padding-bottom: 1.2em;
        //color: #000000;
        &::before {
            display: none;
            position: fixed;
            background-color: white;
            top: .2rem;
            right: .2rem;
            padding: 3px;
            border: 1px solid black;
            color: #000000;
            z-index: 9999;
        }
    }
}
pre.src:hover:before { display: inline;}
/* Languages per Org manual */
pre.src-asymptote:before { content: 'Asymptote'; }
pre.src-awk:before { content: 'Awk'; }
pre.src-C:before { content: 'C'; }
/* pre.src-C++ doesn't work in CSS */
pre.src-clojure:before { content: 'Clojure'; }
pre.src-css:before { content: 'CSS'; }
pre.src-D:before { content: 'D'; }
pre.src-ditaa:before { content: 'ditaa'; }
pre.src-dot:before { content: 'Graphviz'; }
pre.src-calc:before { content: 'Emacs Calc'; }
pre.src-emacs-lisp:before { content: 'Emacs Lisp'; }
pre.src-fortran:before { content: 'Fortran'; }
pre.src-gnuplot:before { content: 'gnuplot'; }
pre.src-haskell:before { content: 'Haskell'; }
pre.src-hledger:before { content: 'hledger'; }
pre.src-java:before { content: 'Java'; }
pre.src-js:before { content: 'Javascript'; }
pre.src-latex:before { content: 'LaTeX'; }
pre.src-ledger:before { content: 'Ledger'; }
pre.src-lisp:before { content: 'Lisp'; }
pre.src-lilypond:before { content: 'Lilypond'; }
pre.src-lua:before { content: 'Lua'; }
pre.src-matlab:before { content: 'MATLAB'; }
pre.src-mscgen:before { content: 'Mscgen'; }
pre.src-ocaml:before { content: 'Objective Caml'; }
pre.src-octave:before { content: 'Octave'; }
pre.src-org:before { content: 'Org mode'; }
pre.src-oz:before { content: 'OZ'; }
pre.src-plantuml:before { content: 'Plantuml'; }
pre.src-processing:before { content: 'Processing.js'; }
pre.src-python:before { content: 'Python'; }
pre.src-R:before { content: 'R'; }
pre.src-ruby:before { content: 'Ruby'; }
pre.src-sass:before { content: 'Sass'; }
pre.src-scheme:before { content: 'Scheme'; }
pre.src-screen:before { content: 'Gnu Screen'; }
pre.src-sed:before { content: 'Sed'; }
pre.src-sh:before { content: 'shell'; }
pre.src-sql:before { content: 'SQL'; }
pre.src-sqlite:before { content: 'SQLite'; }
/* additional languages in org.el's org-babel-load-languages alist */
pre.src-forth:before { content: 'Forth'; }
pre.src-io:before { content: 'IO'; }
pre.src-J:before { content: 'J'; }
pre.src-makefile:before { content: 'Makefile'; }
pre.src-maxima:before { content: 'Maxima'; }
pre.src-perl:before { content: 'Perl'; }
pre.src-picolisp:before { content: 'Pico Lisp'; }
pre.src-scala:before { content: 'Scala'; }
pre.src-shell:before { content: 'Shell Script'; }
pre.src-ebnf2ps:before { content: 'ebfn2ps'; }
/* additional language identifiers per \"defun org-babel-execute\"
   in ob-*.el */
pre.src-cpp:before  { content: 'C++'; }
pre.src-abc:before  { content: 'ABC'; }
pre.src-coq:before  { content: 'Coq'; }
pre.src-groovy:before  { content: 'Groovy'; }
/* additional language identifiers from org-babel-shell-names in
 ob-shell.el: ob-shell is the only babel language using a lambda to put
 the execution function name together. */
pre.src-bash:before  { content: 'bash'; }
pre.src-csh:before  { content: 'csh'; }
pre.src-ash:before  { content: 'ash'; }
pre.src-dash:before  { content: 'dash'; }
pre.src-ksh:before  { content: 'ksh'; }
pre.src-mksh:before  { content: 'mksh'; }
pre.src-posh:before  { content: 'posh'; }
/* Additional Emacs modes also supported by the LaTeX listings package */
pre.src-ada:before { content: 'Ada'; }
pre.src-asm:before { content: 'Assembler'; }
pre.src-caml:before { content: 'Caml'; }
pre.src-delphi:before { content: 'Delphi'; }
pre.src-html:before { content: 'HTML'; }
pre.src-idl:before { content: 'IDL'; }
pre.src-mercury:before { content: 'Mercury'; }
pre.src-metapost:before { content: 'MetaPost'; }
pre.src-modula-2:before { content: 'Modula-2'; }
pre.src-pascal:before { content: 'Pascal'; }
pre.src-ps:before { content: 'PostScript'; }
pre.src-prolog:before { content: 'Prolog'; }
pre.src-simula:before { content: 'Simula'; }
pre.src-tcl:before { content: 'tcl'; }
pre.src-tex:before { content: 'TeX'; }
pre.src-plain-tex:before { content: 'Plain TeX'; }
pre.src-verilog:before { content: 'Verilog'; }
pre.src-vhdl:before { content: 'VHDL'; }
pre.src-xml:before { content: 'XML'; }
pre.src-nxml:before { content: 'XML'; }
/* add a generic configuration mode; LaTeX export needs an additional
 (add-to-list 'org-latex-listings-langs '(conf \" \")) in .emacs */
pre.src-conf:before { content: 'Configuration File'; }

table { border-collapse:collapse; }
caption.t-above { caption-side: top; }
caption.t-bottom { caption-side: bottom; }
td, th { vertical-align:top;  }
th.org-right  { text-align: center;  }
th.org-left   { text-align: center;   }
th.org-center { text-align: center; }
td.org-right  { text-align: right;  }
td.org-left   { text-align: left;   }
td.org-center { text-align: center; }
dt { font-weight: bold; }
.footpara { display: inline; }
.footdef  { margin-bottom: 1em; }
.figure { padding: 1em; }
.figure p { text-align: center; }
.equation-container {
display: table;
text-align: center;
width: 100%;
}
.equation {
vertical-align: middle;
}
.equation-label {
display: table-cell;
text-align: right;
vertical-align: middle;
}
.inlinetask {
padding: 10px;
border: 2px solid gray;
margin: 10px;
background: #ffffcc;
}
#org-div-home-and-up
{ text-align: right; font-size: 70%; white-space: nowrap; }
textarea { overflow-x: auto; }
.linenr { font-size: smaller }
.code-highlighted { background-color: #ffff00; }
.org-info-js_info-navigation { border-style: none; }
#org-info-js_console-label
{ font-size: 10px; font-weight: bold; white-space: nowrap; }
.org-info-js_search-highlight
{ background-color: #ffff00; color: #000000; font-weight: bold; }
.org-svg { width: 90%; }
